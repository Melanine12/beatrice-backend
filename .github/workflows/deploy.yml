name: Deploy Hôtel Beatrice Backend

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job de test et validation
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: hotel_beatrice_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create environment file
      run: |
        cat > .env << EOF
        DB_HOST=localhost
        DB_PORT=3306
        DB_NAME=hotel_beatrice_test
        DB_USER=root
        DB_PASSWORD=root
        JWT_SECRET=test_secret_key
        JWT_EXPIRES_IN=1h
        NODE_ENV=test
        PORT=5002
        EOF

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"localhost" -P"3306" -uroot -proot --silent; do
          sleep 1
        done

    - name: Setup test database
      run: |
        mysql -h localhost -P 3306 -u root -proot -e "
          CREATE DATABASE IF NOT EXISTS hotel_beatrice_test;
          USE hotel_beatrice_test;
          SOURCE database/create_caisses_table.sql;
          SOURCE database/create_paiements_table.sql;
        "

    - name: Run tests
      run: npm test

    - name: Run linting
      run: npm run lint

  # Job de construction de l'image Docker
  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de déploiement en staging
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Ici vous pouvez ajouter vos commandes de déploiement
        # Par exemple, déploiement sur un serveur de staging

  # Job de déploiement en production
  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Ici vous pouvez ajouter vos commandes de déploiement
        # Par exemple, déploiement sur un serveur de production

  # Job de notification
  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "Deployment successful!"
        else
          echo "Deployment failed!"
        fi
